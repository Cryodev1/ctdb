datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



// enums
enum Pronoun {
  HE
  SHE
  THEY
}

enum Playstyle {
  DAS
  TAP
  ROLL
}

enum RomVersion {
  NTSC
  PAL
  NTSC_CUSTOM
  PAL_CUSTOM
}

enum MatchType {
  FRIENDLY
  COMPETITIVE
  CHAMPIONSHIP
}

// Base organization model
// CTM, CTL, CTG, CTWC are examples
model Organization {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(64)
  description String
  events      Event[]
}

// Base event model
// CTM futures 2017, CTL season 3 division 6b, etc
model Event {
  id          String        @id @default(cuid())
  name        String        @unique @db.VarChar(256)
  edition     String?       @db.VarChar(256)
  organizerId String?
  end         DateTime?
  start       DateTime?
  organizer   Organization? @relation(fields: [organizerId], references: [id])
  matches     Match[]
}

// Base Player model
model Player {
  id            String        @id @default(cuid())
  name          String?       @db.VarChar(64)
  country       String?       @db.VarChar(2)
  playstyles    Playstyle[]
  pronouns      Pronoun[]
  eloName       String        @unique @db.VarChar(64)
  computedStats ComputedElo[]
  eloHistory    EloSnapshot[]
  results       Result[]
}

// A player's result in a game
model Result {
  id          String @id @default(cuid())
  player      Player @relation(fields: [playerId], references: [id])
  playerId    String
  game        Game @relation(fields: [gameId], references: [id])
  gameId      String

  styles      Playstyle[]
  rank        Int
  score       Int?

  // one result per player, per game
  @@unique([playerId, gameId])
}

// A game bewteen two or more players
model Game {
  id        String    @id @default(cuid())
  matchId   String
  timestamp DateTime?
  match     Match     @relation(fields: [matchId], references: [id])
  results   Result[]
}

model Match {
  id         String        @id @default(cuid())
  eventId    String?
  timestamp  DateTime
  video      String?
  rom        RomVersion    @default(NTSC)
  type       MatchType     @default(COMPETITIVE)
  event      Event?        @relation(fields: [eventId], references: [id])
  eloChanges EloSnapshot[]
  games      Game[]
}

model EloSnapshot {
  id        String     @id @default(cuid())
  playerId  String
  matchId   String
  index     Int
  victor    Boolean
  newElo    Float
  versionId String
  current   Boolean    @default(true)
  match     Match      @relation(fields: [matchId], references: [id])
  player    Player     @relation(fields: [playerId], references: [id])
  version   EloVersion @relation(fields: [versionId], references: [id])

  // one elo snapshot per player, match, and version
  @@unique([playerId, matchId, versionId])

  // index on player and version; amended to partial
  // index in migration to enforce exactly one 
  // `current = true` per player and version
  // SEE: migrations/20220611020810_current_flag_on_elosnapshot
}

model EloVersion {
  id             String        @id @default(cuid())
  version        String        @unique
  startingValue  Float         @default(1200)
  computedValues ComputedElo[]
  history        EloSnapshot[]
}



// COMPUTED VALUES TABLE
// table of Elo-related values nontrivially determined
// computed values table is updated periodically
model ComputedElo {
  playerId   String
  versionId  String
  rank       Int
  elo        Float
  winCount   Int        @default(0)
  lossCount  Int        @default(0)
  highestElo Float
  lastMatch  DateTime   @default("1970-01-01T00:00:00+00:00")
  player     Player     @relation(fields: [playerId], references: [id])
  version    EloVersion @relation(fields: [versionId], references: [id])

  @@id([playerId, versionId])
}
