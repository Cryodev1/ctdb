datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



// enums
enum Pronoun {
  HE
  SHE
  THEY
}

enum Playstyle {
  DAS
  TAP
  ROLL
}

enum RomVersion {
  NTSC
  PAL
  NTSC_CUSTOM
  PAL_CUSTOM
}

enum MatchType {
  FRIENDLY
  COMPETITIVE
  CHAMPIONSHIP
}

// Base organization model
// CTM, CTL, CTG, CTWC are examples
model Organization {
  id          String @id @default(cuid())
  name        String @db.VarChar(64) @unique
  description String
  events      Event[]
}

// Base event model
// CTM futures 2017, CTL season 3 division 6b, etc
model Event {
  id            String @id @default(cuid())
  name          String @db.VarChar(256) @unique
  edition       String? @db.VarChar(256)
  organizer     Organization? @relation(fields: [organizerId], references: [id])
  organizerId   String?

  start         DateTime?
  end           DateTime?
  
  matches       Match[]
}

// Base Player model
model Player {
  id          String @id @default(cuid())
  eloName     String @db.VarChar(64) @unique
  name        String? @db.VarChar(64)

  playstyles  Playstyle[]
  pronouns    Pronoun[]
  country     String? @db.VarChar(2) // ISO 2 letter code

  results     Result[]
  eloHistory  EloSnapshot[]
}

// A player's result in a game
model Result {
  id          String @id @default(cuid())
  player      Player @relation(fields: [playerId], references: [id])
  playerId    String
  game        Game @relation(fields: [gameId], references: [id])
  gameId      String

  styles      Playstyle[]
  rank        Int
  score       Int?

  // one result per player, per game
  @@unique([playerId, gameId])
}

// A game bewteen two or more players
model Game {
  id          String @id @default(cuid())
  results     Result[]
  match       Match @relation(fields: [matchId], references: [id])
  matchId     String
  timestamp   DateTime?
}

model Match {
  id          String @id @default(cuid())
  games       Game[]
  event       Event @relation(fields: [eventId], references: [id])
  eventId     String
  type        MatchType @default(COMPETITIVE)
  rom         RomVersion @default(NTSC)
  eloChanges  EloSnapshot[]
  timestamp   DateTime  // required for Elo
  video       String?
}

model EloSnapshot {
  id          String @id @default(cuid())
  player      Player @relation(fields: [playerId], references: [id])
  playerId    String
  match       Match @relation(fields: [matchId], references: [id])
  matchId     String
  version     EloVersion @relation(fields: [versionId], references: [id])
  versionId   String

  index       Int // nth match for player
  victor      Boolean
  newElo      Float

  // whether this snapshot is the latest entry
  current     Boolean @default(true)

  // one elo snapshot per player, match, and version
  @@unique([playerId, matchId, versionId])

  // index on player and version; amended to partial
  // index in migration to enforce exactly one 
  // `current = true` per player and version
  // SEE: migrations/20220611020810_current_flag_on_elosnapshot
}

model EloVersion {
  id          String @id @default(cuid())
  version     String @unique
  history     EloSnapshot[]
}