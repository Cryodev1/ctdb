scalar DateTime

enum Pronoun {
    HE
    SHE
    THEY
}

enum Playstyle {
    DAS
    TAP
    ROLL
}

enum RomVersion {
    NTSC
    PAL
    NTSC_CUSTOM
    PAL_CUSTOM
}

enum MatchType {
    FRIENDLY
    COMPETITIVE
    CHAMPIONSHIP
}

type Query {
    info: String!
    getOrganization(name: String, id: Int): Organization
    getEvent(id: Int): Event
    getEventsByName(name: String, edition: String): [Event]
    # getUser(username: String!): User
    getPlayer(name: String, id: Int): Player

    # TODO: Privileged query
    getAllPlayers: [Player!]!
}

# TODO
type Mutation {

    createPlayer(
        name: String!,
        playstyles: [Playstyle!],
        country: String,
    ): Player

    createOrganization(
        name: String!
        description: String!
    ): Organization

    # TODO: all these!

    createResult(
        gameId: Int!
        result: ResultCreatorInput!
    ): Result

    createGame(
        matchId: Int!
        game: GameCreatorInput!
    ): Game

    createMatch(
        eventId: Int!
        match: MatchCreatorInput!
    ): Match
}

type ResultCreator {
    playerId: Int!
    rank: Int!
    score: Int
}

input ResultCreatorInput {
    playerId: Int!
    rank: Int!
    score: Int
}

type GameCreator {
    timestamp: DateTime
    results: [ResultCreator!]
}

input GameCreatorInput {
    timestamp: DateTime
    results: [ResultCreatorInput!]
}

type MatchCreator {
    timestamp: DateTime!
    games: [GameCreator!]
    video: String
    type: MatchType
    rom: RomVersion
}

input MatchCreatorInput {
    timestamp: DateTime!
    games: [GameCreatorInput!]
    video: String
    type: MatchType
    rom: RomVersion
}

type Authenticator {
    token: String
    user: User
}

type Organization {
    id: Int!
    name: String!
    description: String!
    members: [User!]!
    events: [Event!]!
}

type Event {
    id: Int!
    name: String!
    edition: String!
    organization: Organization
    matches: [Match!]!
    participants: [Player!]!
}

type User {
    id: Int!
    username: String!
    player: Player
    organizations: [Organization!]
    pronouns: [String!]
}

type Player {
    id: Int!
    name: String!
    user: User
    playstyles: [Playstyle!]
    country: String

    eloHistory: [EloSnapshot!]!
    results: [Result!]!
    events: [Event!]!
}

type Result {
    id: Int!
    player: Player!
    game: Game!

    rank: Int!
    score: Int
}

type Game {
    id: Int!
    results: [Result!]!
    match: Match!
    timestamp: DateTime
}

type Match {
    id: Int!
    games: [Game!]!
    event: Event!
    timestamp: DateTime!
    video: String
    type: MatchType
    rom: RomVersion
    eloChanges: [EloSnapshot!]!
}

type EloSnapshot {
    id: Int!
    player: Player!
    match: Match!
    index: Int!
    version: String!
    victor: Boolean!
    newElo: Float!
}